/*
 * This file is generated by jOOQ.
 */
package com.thhkpr.db;


import com.thhkpr.db.tables.Settings;
import com.thhkpr.db.tables.Storage;
import com.thhkpr.db.tables.Things;
import com.thhkpr.db.tables.Users;
import com.thhkpr.db.tables.records.SettingsRecord;
import com.thhkpr.db.tables.records.StorageRecord;
import com.thhkpr.db.tables.records.ThingsRecord;
import com.thhkpr.db.tables.records.UsersRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.jooq.types.ULong;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>thhkpr</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<SettingsRecord, ULong> IDENTITY_SETTINGS = Identities0.IDENTITY_SETTINGS;
    public static final Identity<StorageRecord, ULong> IDENTITY_STORAGE = Identities0.IDENTITY_STORAGE;
    public static final Identity<ThingsRecord, ULong> IDENTITY_THINGS = Identities0.IDENTITY_THINGS;
    public static final Identity<UsersRecord, ULong> IDENTITY_USERS = Identities0.IDENTITY_USERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<SettingsRecord> KEY_SETTINGS_PRIMARY = UniqueKeys0.KEY_SETTINGS_PRIMARY;
    public static final UniqueKey<SettingsRecord> KEY_SETTINGS_SETTINGS_ID = UniqueKeys0.KEY_SETTINGS_SETTINGS_ID;
    public static final UniqueKey<StorageRecord> KEY_STORAGE_PRIMARY = UniqueKeys0.KEY_STORAGE_PRIMARY;
    public static final UniqueKey<StorageRecord> KEY_STORAGE_STORAGE_ID = UniqueKeys0.KEY_STORAGE_STORAGE_ID;
    public static final UniqueKey<ThingsRecord> KEY_THINGS_PRIMARY = UniqueKeys0.KEY_THINGS_PRIMARY;
    public static final UniqueKey<ThingsRecord> KEY_THINGS_THING_ID = UniqueKeys0.KEY_THINGS_THING_ID;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_USER_ID = UniqueKeys0.KEY_USERS_USER_ID;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<SettingsRecord, ULong> IDENTITY_SETTINGS = Internal.createIdentity(Settings.SETTINGS, Settings.SETTINGS.SETTINGS_ID);
        public static Identity<StorageRecord, ULong> IDENTITY_STORAGE = Internal.createIdentity(Storage.STORAGE, Storage.STORAGE.STORAGE_ID);
        public static Identity<ThingsRecord, ULong> IDENTITY_THINGS = Internal.createIdentity(Things.THINGS, Things.THINGS.THING_ID);
        public static Identity<UsersRecord, ULong> IDENTITY_USERS = Internal.createIdentity(Users.USERS, Users.USERS.USER_ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<SettingsRecord> KEY_SETTINGS_PRIMARY = Internal.createUniqueKey(Settings.SETTINGS, "KEY_settings_PRIMARY", Settings.SETTINGS.SETTINGS_ID);
        public static final UniqueKey<SettingsRecord> KEY_SETTINGS_SETTINGS_ID = Internal.createUniqueKey(Settings.SETTINGS, "KEY_settings_settings_id", Settings.SETTINGS.SETTINGS_ID);
        public static final UniqueKey<StorageRecord> KEY_STORAGE_PRIMARY = Internal.createUniqueKey(Storage.STORAGE, "KEY_storage_PRIMARY", Storage.STORAGE.STORAGE_ID);
        public static final UniqueKey<StorageRecord> KEY_STORAGE_STORAGE_ID = Internal.createUniqueKey(Storage.STORAGE, "KEY_storage_storage_id", Storage.STORAGE.STORAGE_ID);
        public static final UniqueKey<ThingsRecord> KEY_THINGS_PRIMARY = Internal.createUniqueKey(Things.THINGS, "KEY_things_PRIMARY", Things.THINGS.THING_ID);
        public static final UniqueKey<ThingsRecord> KEY_THINGS_THING_ID = Internal.createUniqueKey(Things.THINGS, "KEY_things_thing_id", Things.THINGS.THING_ID);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, "KEY_users_PRIMARY", Users.USERS.USER_ID);
        public static final UniqueKey<UsersRecord> KEY_USERS_USER_ID = Internal.createUniqueKey(Users.USERS, "KEY_users_user_id", Users.USERS.USER_ID);
    }
}
