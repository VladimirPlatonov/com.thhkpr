/*
 * This file is generated by jOOQ.
 */
package com.thhkpr.databases.tables;


import com.thhkpr.databases.Indexes;
import com.thhkpr.databases.Keys;
import com.thhkpr.databases.Thhkpr;
import com.thhkpr.databases.tables.records.StorageRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Storage extends TableImpl<StorageRecord> {

    private static final long serialVersionUID = 1020098553;

    /**
     * The reference instance of <code>thhkpr.storage</code>
     */
    public static final Storage STORAGE = new Storage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageRecord> getRecordType() {
        return StorageRecord.class;
    }

    /**
     * The column <code>thhkpr.storage.storage_id</code>.
     */
    public final TableField<StorageRecord, ULong> STORAGE_ID = createField("storage_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>thhkpr.storage.storage_name</code>.
     */
    public final TableField<StorageRecord, String> STORAGE_NAME = createField("storage_name", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>thhkpr.storage.storage_describe</code>.
     */
    public final TableField<StorageRecord, String> STORAGE_DESCRIBE = createField("storage_describe", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>thhkpr.storage.storage_place</code>.
     */
    public final TableField<StorageRecord, String> STORAGE_PLACE = createField("storage_place", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>thhkpr.storage.sys_date_create</code>.
     */
    public final TableField<StorageRecord, Timestamp> SYS_DATE_CREATE = createField("sys_date_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thhkpr.storage.sys_date_update</code>.
     */
    public final TableField<StorageRecord, Timestamp> SYS_DATE_UPDATE = createField("sys_date_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thhkpr.storage.sys_who_update_name</code>.
     */
    public final TableField<StorageRecord, String> SYS_WHO_UPDATE_NAME = createField("sys_who_update_name", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * Create a <code>thhkpr.storage</code> table reference
     */
    public Storage() {
        this(DSL.name("storage"), null);
    }

    /**
     * Create an aliased <code>thhkpr.storage</code> table reference
     */
    public Storage(String alias) {
        this(DSL.name(alias), STORAGE);
    }

    /**
     * Create an aliased <code>thhkpr.storage</code> table reference
     */
    public Storage(Name alias) {
        this(alias, STORAGE);
    }

    private Storage(Name alias, Table<StorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Storage(Name alias, Table<StorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Storage(Table<O> child, ForeignKey<O, StorageRecord> key) {
        super(child, key, STORAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Thhkpr.THHKPR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORAGE_PRIMARY, Indexes.STORAGE_STORAGE_ID, Indexes.STORAGE_STORAGE_NAME_INDEX, Indexes.STORAGE_STORAGE_PLACE_INDEX, Indexes.STORAGE_STORAGE_STORAGE_ID_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StorageRecord, ULong> getIdentity() {
        return Keys.IDENTITY_STORAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StorageRecord> getPrimaryKey() {
        return Keys.KEY_STORAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StorageRecord>> getKeys() {
        return Arrays.<UniqueKey<StorageRecord>>asList(Keys.KEY_STORAGE_PRIMARY, Keys.KEY_STORAGE_STORAGE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Storage as(String alias) {
        return new Storage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Storage as(Name alias) {
        return new Storage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Storage rename(String name) {
        return new Storage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Storage rename(Name name) {
        return new Storage(name, null);
    }
}
