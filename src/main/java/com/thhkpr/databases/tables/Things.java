/*
 * This file is generated by jOOQ.
 */
package com.thhkpr.databases.tables;


import com.thhkpr.databases.Indexes;
import com.thhkpr.databases.Keys;
import com.thhkpr.databases.Thhkpr;
import com.thhkpr.databases.tables.records.ThingsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Things extends TableImpl<ThingsRecord> {

    private static final long serialVersionUID = -1018873241;

    /**
     * The reference instance of <code>thhkpr.things</code>
     */
    public static final Things THINGS = new Things();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThingsRecord> getRecordType() {
        return ThingsRecord.class;
    }

    /**
     * The column <code>thhkpr.things.thing_id</code>.
     */
    public final TableField<ThingsRecord, Integer> THING_ID = createField("thing_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thhkpr.things.thing_name</code>.
     */
    public final TableField<ThingsRecord, String> THING_NAME = createField("thing_name", org.jooq.impl.SQLDataType.VARCHAR(4000).nullable(false), this, "");

    /**
     * The column <code>thhkpr.things.thing_describe</code>.
     */
    public final TableField<ThingsRecord, String> THING_DESCRIBE = createField("thing_describe", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>thhkpr.things.thing_voice</code>.
     */
    public final TableField<ThingsRecord, byte[]> THING_VOICE = createField("thing_voice", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>thhkpr.things.sys_date_create</code>.
     */
    public final TableField<ThingsRecord, Timestamp> SYS_DATE_CREATE = createField("sys_date_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thhkpr.things.sys_date_update</code>.
     */
    public final TableField<ThingsRecord, Timestamp> SYS_DATE_UPDATE = createField("sys_date_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>thhkpr.things.sys_who_update_name</code>.
     */
    public final TableField<ThingsRecord, String> SYS_WHO_UPDATE_NAME = createField("sys_who_update_name", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>thhkpr.things.storage_id</code>.
     */
    public final TableField<ThingsRecord, Integer> STORAGE_ID = createField("storage_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>thhkpr.things</code> table reference
     */
    public Things() {
        this(DSL.name("things"), null);
    }

    /**
     * Create an aliased <code>thhkpr.things</code> table reference
     */
    public Things(String alias) {
        this(DSL.name(alias), THINGS);
    }

    /**
     * Create an aliased <code>thhkpr.things</code> table reference
     */
    public Things(Name alias) {
        this(alias, THINGS);
    }

    private Things(Name alias, Table<ThingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Things(Name alias, Table<ThingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Things(Table<O> child, ForeignKey<O, ThingsRecord> key) {
        super(child, key, THINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Thhkpr.THHKPR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.THINGS_PRIMARY, Indexes.THINGS_THING_ID, Indexes.THINGS_THINGS_STORAGE_ID_INDEX, Indexes.THINGS_THINGS_THING_ID_INDEX, Indexes.THINGS_THINGS_THING_NAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ThingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_THINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ThingsRecord> getPrimaryKey() {
        return Keys.KEY_THINGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ThingsRecord>> getKeys() {
        return Arrays.<UniqueKey<ThingsRecord>>asList(Keys.KEY_THINGS_PRIMARY, Keys.KEY_THINGS_THING_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ThingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ThingsRecord, ?>>asList(Keys.STORAGE_ID_FK);
    }

    public Storage storage() {
        return new Storage(this, Keys.STORAGE_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Things as(String alias) {
        return new Things(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Things as(Name alias) {
        return new Things(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Things rename(String name) {
        return new Things(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Things rename(Name name) {
        return new Things(name, null);
    }
}
